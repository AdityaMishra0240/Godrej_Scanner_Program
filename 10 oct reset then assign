import sys
import select
import signal
import serial
import threading
import json
import os
from time import sleep, time
from gpiozero import LED, Button, DigitalInputDevice
from RPi import GPIO

# === GPIO CONFIG ===
output_pins = {
    6: 17,   # Assign button GPIO6  → Output GPIO17
    13: 18,  # Assign button GPIO13 → Output GPIO18
    11: 19,  # Assign button GPIO11 → Output GPIO19
    8: 20,   # Assign button GPIO8  → Output GPIO20
}

reset_button_pin = 7
led_pin = 22      # LED for feedback
control_pin = 12  # GPIO12 GND for 10 sec → turn OFF outputs

# === FILE CONFIG ===
BARCODE_FILE = "barcode_map.json"

# === INTERNAL STATE ===
def load_assignments():
    if os.path.exists(BARCODE_FILE):
        try:
            with open(BARCODE_FILE, "r") as f:
                data = json.load(f)
                print(f"[LOAD] Loaded {len(data)} barcode assignments from memory")
                return {k: int(v) for k, v in data.items()}
        except Exception as e:
            print(f"[WARN] Could not load assignments: {e}")
    return {}

def save_assignments():
    try:
        with open(BARCODE_FILE, "w") as f:
            json.dump(barcode_pin_map, f)
        print("[SAVE] Assignments saved to memory")
    except Exception as e:
        print(f"[ERROR] Saving assignments failed: {e}")

barcode_pin_map = load_assignments()
gpio_objects = {}
assignment_inputs = {pin: Button(pin, pull_up=True, bounce_time=0.1) for pin in output_pins}
reset_button = Button(reset_button_pin, pull_up=True, bounce_time=0.1)
feedback_led = LED(led_pin)
control_input = DigitalInputDevice(control_pin, pull_up=True)
assign_mode = None
assign_enabled = False   # assignment allowed only after reset
scanner_enabled = True   # scanner active/inactive flag

# === SERIAL CONFIG (RS232 scanner) ===
try:
    ser = serial.Serial("/dev/ttyUSB0", baudrate=9600, timeout=0.1)
    print("[INFO] RS232 scanner connected at /dev/ttyUSB0")
except Exception as e:
    print(f"[WARN] RS232 scanner not available: {e}")
    ser = None

# === FUNCTIONS ===
def blink_feedback():
    feedback_led.on()
    sleep(0.2)
    feedback_led.off()

def switch_output(barcode):
    """Turn ON output until GPIO12 is LOW for 10 sec"""
    global scanner_enabled
    short_code = barcode[:11]
    if short_code in barcode_pin_map:
        pin = barcode_pin_map[short_code]
        if pin not in gpio_objects:
            gpio_objects[pin] = LED(pin)
        gpio_objects[pin].on()
        scanner_enabled = False  # Disable scanner during output active
        print(f"[ACTION] Barcode {short_code} → GPIO{pin} ON")

        # Wait until GPIO12 LOW for 10 seconds
        start_low = None
        while True:
            if not control_input.value:  # GPIO12 LOW
                if start_low is None:
                    start_low = time()
                elif time() - start_low >= 10:
                    break
            else:
                start_low = None
            sleep(0.05)

        gpio_objects[pin].off()
        print(f"[INFO] GPIO{pin} OFF after GPIO12 LOW 10s")
        sleep(10)  # Keep scanner disabled for 10 seconds after output off
        scanner_enabled = True
        print("[INFO] Scanner re-enabled after cooldown")
    else:
        print(f"[WARN] Unknown barcode {short_code}")

def assign_barcode(short_code, pin):
    barcode_pin_map[short_code] = pin
    print(f"[ASSIGN] {short_code} → GPIO{pin}")
    blink_feedback()
    save_assignments()  # Save after each assignment

def reset_assignments():
    global assign_enabled
    barcode_pin_map.clear()
    print("[RESET] All assignments cleared")
    blink_feedback()
    if os.path.exists(BARCODE_FILE):
        os.remove(BARCODE_FILE)
        print("[RESET] Assignment memory cleared from file")
    assign_enabled = True  # enable assignment mode after reset
    print("[INFO] Assignment mode ENABLED. You can now press assign buttons.")

def process_barcode(barcode):
    global assign_mode
    if not scanner_enabled:
        print("[INFO] Scanner temporarily disabled, ignoring scan")
        return

    short_code = barcode[:11]
    if assign_mode:
        assign_barcode(short_code, assign_mode)
        assign_mode = None
    else:
        switch_output(barcode)

def read_stdin_loop():
    """Thread for Bluetooth scanner (stdin input)"""
    while True:
        if select.select([sys.stdin], [], [], 0.1)[0]:
            barcode = sys.stdin.readline().strip()
            if barcode:
                process_barcode(barcode)

def read_serial_loop():
    """Thread for RS232 scanner"""
    if not ser:
        return
    while True:
        try:
            line = ser.readline().decode("utf-8").strip()
            if line:
                process_barcode(line)
        except Exception as e:
            print(f"[ERROR] Serial read: {e}")
            break

def cleanup_and_exit(*args):
    print("\n[EXIT] Cleaning up GPIO...")
    for led in gpio_objects.values():
        led.off()
    feedback_led.off()
    GPIO.cleanup()
    sys.exit(0)

# === MAIN LOOP ===
def main():
    global assign_mode, assign_enabled
    print("[READY] Press reset first to enable assignment mode. Ctrl+C to stop.")

    signal.signal(signal.SIGINT, cleanup_and_exit)
    signal.signal(signal.SIGTERM, cleanup_and_exit)

    # Start threads for scanner inputs
    threading.Thread(target=read_stdin_loop, daemon=True).start()
    threading.Thread(target=read_serial_loop, daemon=True).start()

    while True:
        # Handle button presses for assignment
        for btn_pin, btn in assignment_inputs.items():
            if btn.is_pressed:
                if assign_enabled:
                    print(f"[BUTTON] Assign button GPIO{btn_pin} pressed → Output GPIO{output_pins[btn_pin]}")
                    assign_mode = output_pins[btn_pin]
                    blink_feedback()
                    sleep(0.2)
                else:
                    print("[INFO] Reset not pressed yet — assignment disabled.")
                    blink_feedback()
                    sleep(0.2)

        # Handle reset button
        if reset_button.is_pressed:
            print(f"[BUTTON] Reset button GPIO{reset_button_pin} pressed")
            reset_assignments()
            assign_mode = None
            blink_feedback()
            sleep(0.5)

        sleep(0.05)

if __name__ == "__main__":
    main()
